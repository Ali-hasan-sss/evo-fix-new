// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  fullName            String                @db.VarChar(100)
  phoneNO             String
  governorate         String
  password            String
  address             String
  avatar              String?
  role                Role                  @default(USER)
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  maintenanceRequests Maintenance_Request[] @relation("UserRequests")
  assignedRequests    Maintenance_Request[] @relation("TechnicianAssignments")
  sentEmails          Email[]               @relation("EmailSender")
  receivedEmails      Email[]               @relation("EmailRecipient")
  notifications       Notification[]
  sms                 SMS[]
  complaints          Complaints[]
}

enum Role {
  ADMIN
  USER
  TECHNICAL
}

model Maintenance_Request {
  id            Int            @id @default(autoincrement())
  user          User           @relation("UserRequests", fields: [userID], references: [id])
  userID        Int
  technician    User           @relation("TechnicianAssignments", fields: [technicalID], references: [id])
  technicalID   Int
  governorate   String
  deviceType    String
  phoneNO       String
  address       String
  descProblem   String
  status        requestStatus  @default(PENDING)
  fee           Decimal        @default(0)
  createdAt     DateTime       @default(now())
  payments      Payment[]
  reviews       Reviews[]
  notifications Notification[]
  sms           SMS[]
}

enum requestStatus {
  APPROVED
  PENDING
  REJECTED
  UNDERPROCESSING
  DONE
}

model Payment {
  id                   Int                 @id @default(autoincrement())
  maintenanceRequest   Maintenance_Request @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  amount               Decimal
  paymentDate          DateTime            @default(now())
  paymentState         String
  createdAt            DateTime            @default(now())
}

model Reviews {
  id                   Int                 @id @default(autoincrement())
  maintenanceRequest   Maintenance_Request @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  ratting              Int
  comment              String
  createdAt            DateTime            @default(now())
}

model Notification {
  id                   Int                 @id @default(autoincrement())
  user                 User                @relation(fields: [userID], references: [id])
  userID               Int
  maintenanceRequest   Maintenance_Request @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  message              String
  createdAt            DateTime            @default(now())
  isUserRead           Boolean             @default(false)
  isTechRead           Boolean             @default(false)
}

model Email {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("EmailSender", fields: [senderID], references: [id])
  senderID    Int
  recipient   User     @relation("EmailRecipient", fields: [recipientID], references: [id])
  recipientID Int
  subject     String
  body        String
  createdAt   DateTime @default(now())
}

model SMS {
  id                   Int                 @id @default(autoincrement())
  user                 User                @relation(fields: [userID], references: [id])
  userID               Int
  maintenanceRequest   Maintenance_Request @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  message              String
  createdAt            DateTime            @default(now())
}

model Complaints {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userID], references: [id])
  userID    Int
  message   String
  createdAt DateTime @default(now())
}

model Services {
  id        Int      @id @default(autoincrement())
  icon      String?
  title     String
  paragraph String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

// enum Governorates {
//   Damascus    @map("دمشق")
//   Rif_Dimashq @map("ريف دمشق")
//   Quneitra    @map("القنيطرة")
//   Daraa       @map("درعا")
//   As_Suwayda  @map("السويداء")
//   Homs        @map("حمص")
//   Tartus      @map("طرطوس")
//   Latakia     @map("اللاذقية")
//   Hama        @map("حماة")
//   Idlib       @map("إدلب")
//   Aleppo      @map("حلب")
//   Raqqa       @map("الرقة")
//   Deir_ez_Zor @map("دير الزور")
//   Al_Hasakah  @map("الحسكة")
// }
